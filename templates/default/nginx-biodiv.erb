## Block download agenta
if ($http_user_agent ~* LWP::Simple|wget|libwww-perl) {
	return 403;
}
## Block some nasty robots
if ($http_user_agent ~ (msnbot|Purebot|Baiduspider|Lipperhey|Mail.Ru|scrapbot|Riddler|riddler|SemrushBot-SA|SemrushBot|AhrefsBot|BLEXBot|DotBot|coccocbot-web|Exabot|linkdexbot|MJ12bot|MojeekBot|SeznamBot|Uptimebot|YandexAccessibilityBot|YandexBot|YandexMobileBot|Baiduspider-video|Baiduspider-image|sogou|SemrushBot/*|MegaIndex.ru/*|YandexBot/*|Baiduspider/*|DomainCrawler/*|PiplBot|ia_archiver|CCBot/*|Slurp)) {
	return 403;
}

## Deny referal spam
if ( $http_referer ~* (jewelry|viagra|nude|girl|nudit|casino|poker|porn|sex|teen|babes) ) {
	return 403; 
}


location = /favicon.ico {
	log_not_found off;
	access_log off;
}

location = /robots.txt {
	allow all;
	log_not_found off;
	access_log off;
	root <%= node.biodiv.augmentedmaps %>;
}
# Very rarely should these ever be accessed outside of your lan
location ~* \.(txt|log)$ {
	deny all;
}

location ~ \..*/.*\.php$ {
	return 403;
}

location /sites {
	root <%= node.biodiv.augmentedmaps %>;
}

# No no for private
location ~ ^/sites/.*/private/ {
	return 403;
}
# Block access to "hidden" files and directories whose names begin with a
# period. This includes directories used by version control systems such
# as Subversion or Git to store control files.
location ~ (^|/)\. {
	return 403;
}

location ~ ^/group_icons {
        rewrite  ^/group_icons/(.*)$ /<%= node.biodiv.appname %>/group_icons/$1 permanent;
}

location ~* ^/<%= node.biodiv.appname %>/(static/templates|logo|observations|newsletters|group-themes|users|userGroups|group_icons|content|img|docs|datasources|traits) {
	root /apps;
	expires 30d;
}
location = /logo/IBP.png {
	root <%= node.biodiv.data %>;
}


#CAUSING PROBLEM with proxied content
#location ~*  \.(jpg|jpeg|png|gif|ico|css|js|pdf)$ {
#    expires 30d;
#}

location /<%= node.biodiv.appname %> {
	rewrite  ^/<%= node.biodiv.appname %>/(.*)$ /$1 permanent;
}
location ~ ^/assets {
        rewrite  ^/assets/(.*)$ /<%= node.biodiv.appname %>/assets/$1 permanent;
}
location /ViewerJS {
        rewrite  ^/ViewerJS/(.*)$ /<%= node.biodiv.appname %>/ViewerJS/$1 permanent;
}

location /geoserver {
	proxy_pass http://<%= node.biodiv.servername %>:8080/geoserver;
	proxy_redirect	default;
	proxy_set_header	Host $host;
}

#location ~ /(wgp_maps) {
#	rewrite (.*) /solr/$1;
#	proxy_pass http://localhost:8080;
#	proxy_redirect default;
#}

#location ~ /(solr) {
#	proxy_pass http://localhost:8080;
#	proxy_redirect default;
#}

#access_log      <%= node.nginx.dir %>/logs/<%= node.biodiv.appname %>-access.log;
#error_log       <%= node.nginx.dir %>/logs/<%= node.biodiv.appname %>-error.log info;
rewrite_log on;
proxy_intercept_errors	on;	

location ~* ^/content/(.*)$ {
	rewrite ^/content/(.*)$ /<%= node.biodiv.appname %>/content/$1 last;
}

location /map/show {
	rewrite ^/map/show /map last;
}


#location ~ ^/(biodiversity_news|biodiversity_in_india) {
#	try_files $uri  @rewrite;
#	root <%= node.biodiv.augmentedmaps %>;
#}

#location ~ ^/about/(technology|whats-new)\s*$ {
#	try_files $uri  @rewrite;
#
#	root <%= node.biodiv.augmentedmaps %>;
#}

#location / {
#	try_files $uri  @rewrite;
#
#	root <%= node.biodiv.augmentedmaps %>;
#}


#location ~ \.php$ {
#	try_files $uri $uri/ @rewrite;

#	include <%= node.biodiv.data %>/nginx-1.4.7/conf/fastcgi_params;
#	root <%= node.biodiv.augmentedmaps %>;

#	fastcgi_split_path_info ^(.+\.php)(/.+)$;
#NOTE: You should have "cgi.fix_pathinfo = 0;" in php.ini
#	fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;

#	fastcgi_intercept_errors on;
#	fastcgi_pass 127.0.0.1:9000;
#}

error_page 404 /404.html;
location = /404.html {
	root <%= node.biodiv.data %>;
}

# redirect server error pages to the static page /50x.html
#
error_page 502 503 504 /update_in_progress.html;
location = /update_in_progress.html {
	root <%= node.biodiv.data %>;
}

location = /schema {
	root <%= node.biodiv.data %>;
}


proxy_cookie_path /biodiv /;


# config to don't allow the browser to render the page inside an frame or iframe
# and avoid clickjacking http://en.wikipedia.org/wiki/Clickjacking
# if you need to allow [i]frames, you can use SAMEORIGIN or even set an uri with ALLOW-FROM uri
# https://developer.mozilla.org/en-US/docs/HTTP/X-Frame-Options
add_header X-Frame-Options SAMEORIGIN;

# when serving user-supplied content, include a X-Content-Type-Options: nosniff header along with the Content-Type: header,
# to disable content-type sniffing on some browsers.
# https://www.owasp.org/index.php/List_of_useful_HTTP_headers
# currently suppoorted in IE > 8 http://blogs.msdn.com/b/ie/archive/2008/09/02/ie8-security-part-vi-beta-2-update.aspx
# http://msdn.microsoft.com/en-us/library/ie/gg622941(v=vs.85).aspx
# 'soon' on Firefox https://bugzilla.mozilla.org/show_bug.cgi?id=471020
add_header X-Content-Type-Options nosniff;

# This header enables the Cross-site scripting (XSS) filter built into most recent web browsers.
# It's usually enabled by default anyway, so the role of this header is to re-enable the filter for 
# this particular website if it was disabled by the user.
# https://www.owasp.org/index.php/List_of_useful_HTTP_headers
add_header X-XSS-Protection "1; mode=block";

# with Content Security Policy (CSP) enabled(and a browser that supports it(http://caniuse.com/#feat=contentsecuritypolicy),
# you can tell the browser that it can only download content from the domains you explicitly allow
# http://www.html5rocks.com/en/tutorials/security/content-security-policy/
# https://www.owasp.org/index.php/Content_Security_Policy
# I need to change our application code so we can increase security by disabling 'unsafe-inline' 'unsafe-eval'
# directives for css and js(if you have inline css or js, you will need to keep it too).
# more: http://www.html5rocks.com/en/tutorials/security/content-security-policy/#inline-code-considered-harmful
#add_header Content-Security-Policy "default-src 'self' https://<%= node.biodiv.servername %> https://*.<%= node.biodiv.servername %>; script-src 'self' 'unsafe-inline' 'unsafe-eval' https://ssl.google-analytics.com https://assets.zendesk.com https://connect.facebook.net; img-src 'self' https://ssl.google-analytics.com https://s-static.ak.facebook.com https://assets.zendesk.com; style-src 'self' 'unsafe-inline' https://fonts.googleapis.com https://assets.zendesk.com; font-src 'self' https://themes.googleusercontent.com; frame-src https://assets.zendesk.com https://www.facebook.com https://s-static.ak.facebook.com https://tautt.zendesk.com; object-src 'none'";
#add_header Content-Security-Policy "default-src 'self' https://<%= node.biodiv.servername %> https://*.<%= node.biodiv.servername %>; ";


  # you can tell the browser that it can only download content from the domains you explicitly allow
#add_header Content-Security-Policy "default-src 'self'; script-src 'self'; img-src 'self' data:; style-src 'self' 'unsafe-inline'; font-src 'self' data:; frame-src 'self'; connect-src 'self' https://apis.google.com; object-src 'none' ";
add_header Content-Security-Policy "frame-ancestors 'self' https://*.<%= node.biodiv.servername %> http://threatenedtaxa.org";

# don't send the nginx version number in error pages and Server header
server_tokens off;


